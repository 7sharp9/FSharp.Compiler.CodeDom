
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace global

namespace NSPC
    // Generated by F# CodeDom
    #nowarn "49" // uppercase argument names
    #nowarn "67" // this type test or downcast will always hold
    #nowarn "66" // this upcast is unnecessary - the types are identical
    #nowarn "58" // possible incorrect indentation..
    #nowarn "57" // do not use create_DelegateEvent
    #nowarn "51" // address-of operator can occur in the code
    #nowarn "1183" // unused 'this' reference
    open System
    
    exception ReturnException1b3e9f5f7928455796d17d58d0bc1928 of obj
    exception ReturnNoneException1b3e9f5f7928455796d17d58d0bc1928
    [<AutoOpen>]
    module FuncConvertFinalOverload1b3e9f5f7928455796d17d58d0bc1928 =
      // This extension member adds to the FuncConvert type and is the last resort member in the method overloading rules. 
      type global.Microsoft.FSharp.Core.FuncConvert with
          /// A utility function to convert function values from tupled to curried form
          static member FuncFromTupled (f:'T -> 'Res) = f
    
    type
        
        ClassWithFields = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            static val mutable private Microsoft:string
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            static val mutable private StaticPublicField:int
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable NonStaticPublicField:int
            
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable PrivateField:int
            new() as this =
                {
                } then
                        this.PrivateField <- 7;
                        this.NonStaticPublicField <- 6;
            abstract UsePrivateField : int -> int
            default this.UsePrivateField  (i:int) =
                let mutable i = i
                this.PrivateField <- i
                this.PrivateField
        end
    
    and
        
        TestFields = class
            new() as this =
                {
                }
            static member UseFields  (i:int) =
                let mutable i = i
                let mutable (number:ClassWithFields) = new ClassWithFields()
                ((number.NonStaticPublicField + number.UsePrivateField(i)) + ClassWithFields.StaticPublicField)
        end