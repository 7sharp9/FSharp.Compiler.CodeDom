
//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version: 4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if 
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace global

namespace Namespace1
    // Generated by F# CodeDom
    #nowarn "49" // uppercase argument names
    #nowarn "67" // this type test or downcast will always hold
    #nowarn "66" // this upcast is unnecessary - the types are identical
    #nowarn "58" // possible incorrect indentation..
    #nowarn "57" // do not use create_DelegateEvent
    #nowarn "51" // address-of operator can occur in the code
    #nowarn "1183" // unused 'this' reference
    open System
    
    exception ReturnException7ea525afb85546a795fb0450bd126068 of obj
    exception ReturnNoneException7ea525afb85546a795fb0450bd126068
    [<AutoOpen>]
    module FuncConvertFinalOverload7ea525afb85546a795fb0450bd126068 =
      // This extension member adds to the FuncConvert type and is the last resort member in the method overloading rules. 
      type global.Microsoft.FSharp.Core.FuncConvert with
          /// A utility function to convert function values from tupled to curried form
          static member FuncFromTupled (f:'T -> 'Res) = f
    
    type
        
        (* partial *)PartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            abstract MainMethod : unit -> unit
            default this.MainMethod  () =
                let mutable (test1:PartialClass) = new PartialClass()
                test1.Foo1() |> ignore
                test1.Foo2() |> ignore
            
            abstract Foo1 : unit -> int
            default this.Foo1  () =
                1
        end
    
    and
        
        (* partial *)PartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            abstract Foo2 : unit -> int
            default this.Foo2  () =
                2
        end
    
    and
        [<Microsoft.FSharp.Core.SealedAttribute;
          >]
        
        (* partial *)SealedPartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            abstract MainMethod : unit -> unit
            default this.MainMethod  () =
                let mutable (test1:SealedPartialClass) = new SealedPartialClass()
                test1.Foo1() |> ignore
                test1.Foo2() |> ignore
            
            abstract Foo1 : unit -> int
            default this.Foo1  () =
                1
        end
    
    and
        [<Microsoft.FSharp.Core.SealedAttribute;
          >]
        
        (* partial *)SealedPartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            abstract Foo2 : unit -> int
            default this.Foo2  () =
                2
        end
    
    and
        [<Microsoft.FSharp.Core.AbstractClassAttribute;
          >]
        
        (* partial *)AbstractPartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            abstract MainMethod : unit -> unit
            default this.MainMethod  () =
                ()
            
            abstract Foo1 : unit -> int
            default this.Foo1  () =
                1
        end
    
    and
        [<Microsoft.FSharp.Core.AbstractClassAttribute;
          >]
        
        (* partial *)AbstractPartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            abstract Foo2 : unit -> int
            default this.Foo2  () =
                2
        end
    
    and
        
        (* partial *)PrivatePartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            abstract MainMethod : unit -> unit
            default this.MainMethod  () =
                let mutable (test1:PrivatePartialClass) = new PrivatePartialClass()
                test1.Foo1() |> ignore
                test1.Foo2() |> ignore
            
            abstract Foo1 : unit -> int
            default this.Foo1  () =
                1
        end
    
    and
        
        (* partial *)PrivatePartialClass = class
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            abstract Foo2 : unit -> int
            default this.Foo2  () =
                2
        end
    
    and
        [<Microsoft.FSharp.Core.SealedAttribute;
          >]
        
        (* partial *)SealedPartialStruct = struct
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            member this.MainMethod  () =
                let mutable (test1:SealedPartialStruct) = new SealedPartialStruct()
                test1.Foo1() |> ignore
                test1.Foo2() |> ignore
            
            member this.Foo1  () =
                1
        end
    
    and
        [<Microsoft.FSharp.Core.SealedAttribute;
          >]
        
        (* partial *)SealedPartialStruct = struct
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            member this.Foo2  () =
                2
        end
    
    and
        [<Microsoft.FSharp.Core.AbstractClassAttribute;
          >]
        
        (* partial *)AbstractPartialStruct = struct
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field1:int
            member this.MainMethod  () =
                ()
            
            member this.Foo1  () =
                1
        end
    
    and
        [<Microsoft.FSharp.Core.AbstractClassAttribute;
          >]
        
        (* partial *)AbstractPartialStruct = struct
            [<Microsoft.FSharp.Core.DefaultValueAttribute(false)>]
            val mutable field2:int
            member this.Foo2  () =
                2
        end